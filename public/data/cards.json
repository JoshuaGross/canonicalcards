{
  "30c2457a-4295-43f2-b2dc-fc95a7001acc" : {
    "answer" : 0,
    "candidates" : [ "Chomsky Normal Form (CNF)", "Backus-Naur Form (BNF)", "Extended Backus–Naur Form (EBNF)", "Greibach Normal Form (GNF)" ],
    "explanation" : {
      "links": [
        {
          "text": "Chomsky, Noam (1959). \"On Certain Formal Properties of Grammars\". Information and Control 2: 137–167. doi:10.1016/s0019-9958(59)90362-6.",
          "link": "http://www.sciencedirect.com/science/article/pii/S0019995859903626/pdf?md5=9d466f851651bd592afa5ee561b7a0b0&pid=1-s2.0-S0019995859903626-main.pdf"
        }
      ],
      "source": {
        "text": "Wikipedia",
        "link": "http://en.wikipedia.org/wiki/Chomsky_normal_form"
      },
      "text" : "In computer science, a context-free grammar is said to be in Chomsky normal form if all of its production rules are of the form: <img alt='A \rightarrow BC \text{ or}\\A \rightarrow a' src='img/30c2457a-4295-43f2-b2dc-fc95a7001acc-img1.png' /> where A, B and C are nonterminal symbols, α is a terminal symbol (a symbol that represents a constant value), S is the start symbol, and ε is the empty string. Also, neither B nor C may be the start symbol.<br/>Every grammar in Chomsky normal form is context-free, and conversely, every context-free grammar can be transformed into an equivalent one which is in Chomsky normal form. Several algorithms for performing such a transformation are known."
    },
    "question" : "A formal grammar is in Chomsky reduced form if all of its production rules are of the form: <img alt='A \rightarrow BC \text{ or}\\A \rightarrow a' src='img/30c2457a-4295-43f2-b2dc-fc95a7001acc-img0.png' /><br/>where <i>A</i>, <i>B</i> and <i>C</i> are nonterminal symbols, and <i>a</i> is a terminal symbol.",
    "type" : "candidate"
  },
  "2baca5c7-a68d-45d6-8834-cb7504468412" : {
    "answer" : 0,
    "candidates" : [ "dynamic programming", "divide-and-conquer", "greedy", "optimization approach" ],
    "explanation" : {
      "source" : {
        "link" : "http://en.wikipedia.org/wiki/Dynamic_programming",
        "text" : "Wikipedia"
      },
      "text" : "In mathematics, computer science, economics, and bioinformatics, dynamic programming is a method for solving a complex problem by breaking it down into a collection of simpler subproblems. It is applicable to problems exhibiting the properties of overlapping subproblems[1] and optimal substructure (described below). When applicable, the method takes far less time than naive methods that don't take advantage of the subproblem overlap (like depth-first search)."
    },
    "question" : "It solves small, constrained versions of an algorithmic problem.",
    "type" : "candidate"
  },

  "292a9ab7-d8af-4043-93fe-1667ee487e4a" : {
    "answer" : 0,
    "candidates" : [ "list of nodes", "single integer node", "boolean matrix", "acyclic graph" ],
    "explanation" : {
      "text" : "An adjacency list is a graph that associates a given vertex with a collection of its neighboring vertices.  So a list of nodes would be the correct answer."
    },
    "question" : "An adjacency list is a representation of a graph in which each node has a(n) _______ adjacent to it.",
    "type" : "candidate"
  },
  "2baca5c7-a68d-45d6-8834-cb7504468412" : {
    "answer" : 0,
    "candidates" : [ "dynamic programming", "divide-and-conquer", "greedy", "optimization approach" ],
    "explanation" : {
      "source" : {
        "link" : "http://en.wikipedia.org/wiki/Dynamic_programming",
        "text" : "Wikipedia"
      },
      "text" : "In mathematics, computer science, economics, and bioinformatics, dynamic programming is a method for solving a complex problem by breaking it down into a collection of simpler subproblems. It is applicable to problems exhibiting the properties of overlapping subproblems[1] and optimal substructure (described below). When applicable, the method takes far less time than naive methods that don't take advantage of the subproblem overlap (like depth-first search)."
    },
    "question" : "It solves small, constrained versions of an algorithmic problem.",
    "type" : "candidate"
  },
  "83b32e39-49d0-4fd1-9137-54382b5a6bbf" : {
    "answer" : 0,
    "candidates" : [ "In-order traversal", "Post-order traversal", "Level-order traversal", "Pre-order traversal" ],
    "explanation" : {
      "links" : [ {
        "link" : "http://linuxmeerkat.wordpress.com/2012/12/25/traversing-binary-trees/",
        "text" : "Good overview of tree traversal techniques"
      } ],
      "source" : {
        "link" : "http://en.wikipedia.org/wiki/Tree_traversal",
        "text" : "Wikipedia"
      },
      "text" : "Tree traversal (also known as tree search) is a form of graph traversal and refers to the process of visiting (examining and/or updating) each node in a tree data structure, exactly once, in a systematic way. Such traversals are classified by the order in which the nodes are visited.  In-order traversal visits nodes by recursively processing the left sub-tree, then the root (checking/displaying the root data as needed), and finally by recursively processing the right sub-tree."
    },
    "images" : [ {
      "caption" : "In-order traversal",
      "data" : "",
      "source" : "http://commons.wikimedia.org/wiki/File:Sorted_binary_tree_inorder.svg"
    } ],
    "question" : "In tree traversal, process all nodes of a tree by recursively processing the left sub-tree, then the root, and finally the right sub-tree."
  },
  "9bbb5201-e3ba-4212-8915-1e12b22e4ce4" : {
    "answer" : 0,
    "candidates" : [ "Splay tree", "B-tree", "AVL tree", "Red-Black tree" ],
    "explanation" : {
      "links" : [ {
        "link" : "http://cs.lmu.edu/~ray/notes/splaytrees/",
        "text" : "Excellent summary of splay trees with diagram"
      }, {
        "link" : "https://www.cs.usfca.edu/~galles/visualization/SplayTree.html",
        "text" : "Interactive splay tree animation"
      } ],
      "source" : {
        "link" : "http://en.wikipedia.org/wiki/Splay_tree",
        "text" : "Wikipedia"
      },
      "text" : "When a splay tree node is accessed, a splay operation is performed on the node to move it to the root. A splay operation is performed by executing a sequence of splay steps, each of which moves x closer to the root. By conducting a splay operation on the node of interest after every access, the recently accessed nodes are kept near the root and the tree remains roughly balanced."
    },
    "question" : "A ____ is a self-adjusting binary search tree with the additional property that recently accessed elements are quick to access again.",
    "type" : "candidate"
  },
  "c21a131e-ca38-46c2-9511-366a29927324" : {
    "answer" : 0,
    "candidates" : [ "B-tree", "AVL tree", "Red-Black tree", "Splay tree" ],
    "explanation" : {
      "source" : {
        "link" : "http://en.wikipedia.org/wiki/B-tree",
        "text" : "Wikipedia"
      },
      "text" : "The B-tree is a generalization of a binary search tree in that a node can have more than two children.  Indeed, large B-trees with millions of records would have more than 20 children.  But by keeping a cached index, the number of disk accesses needed for a query can be minimized down to 3 or 4, much less than many alternative data structures used for disk storage of data. However, these features that make a B-tree so fast for read operations also make insertions and deletions quite slow."
    },
    "question" : "Uses a high branching factor to minimize the number of disk accesses required to access a record.",
    "type" : "candidate"
  },
  "d2fe4f3c-883e-11e4-97ad-1fbcbb1021e5" : {
    "candidates" : [ "Type-0 grammars", "Type-1 grammars", "Type-2 grammars", "Type-3 grammars" ],
    "explanation" : {
      "links" : [ {
        "link" : "http://stackoverflow.com/questions/8398030/chomsky-hierarchy-in-plain-english",
        "text" : "Good StackOverflow overview"
      } ],
      "source" : {
        "link" : "http://en.wikipedia.org/wiki/Unrestricted_grammar",
        "text" : "Wikipedia"
      },
      "text" : "In formal language theory, an unrestricted grammar is a formal grammar on which no restrictions are made on the left and right sides of the grammar's productions. This is the most general class of grammars in the Chomsky–Schützenberger hierarchy, and can generate arbitrary recursively enumerable languages."
    },
    "question" : "\"In the Chomsky hierarchy, these generate exactly all languages that can be recognized by a Turing machine."
  },
  "kdsfg89435k" : {
    "answer" : 0,
    "candidates" : [ "one", "two", "three", "ten" ],
    "explanation" : {
      "source" : {
        "link" : "http://en.wikipedia.org/wiki/AVL_tree",
        "text" : "Wikipedia"
      },
      "text" : "In an AVL tree, the heights of the two child subtrees of any node differ by at most one; if at any time they differ by more than one, rebalancing is done to restore this property. Lookup, insertion, and deletion all take O(log n) time in both the average and worst cases, where n is the number of nodes in the tree prior to the operation. Insertions and deletions may require the tree to be rebalanced by one or more tree rotations."
    },
    "images" : [ {
      "caption" : "AVL Tree",
      "data" : "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",
      "source" : "http://commons.wikimedia.org/wiki/User:Mikm",
      "type" : "png"
    } ],
    "question" : "In an AVL tree, the heights of the two child subtrees of any node differ by at most _____.",
    "type" : "candidate"
  }
}
